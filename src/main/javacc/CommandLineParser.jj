// CommandLineParser.jj
options {
  STATIC = false;
  UNICODE_INPUT=true;
  JAVA_UNICODE_ESCAPE=true;
  /*
  DEBUG_PARSER=true;
  DEBUG_LOOKAHEAD=true;
  DEBUG_TOKEN_MANAGER=true;
  */
}

PARSER_BEGIN(CommandLineParser)
package com.manenkov.parser;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import com.manenkov.Application;
import com.manenkov.ApplicationParseException;

public class CommandLineParser {
    public static void parse(String[] args) {
        try {
            CommandLineParser parser = new CommandLineParser(
                new ByteArrayInputStream(String.join(" ", args).getBytes(StandardCharsets.UTF_8))
            );
            parser.Command();
        } catch (ParseException e) {
          System.out.println(e.getMessage());
        } catch (Exception e) {
          e.printStackTrace();
        }
    }
}

PARSER_END(CommandLineParser)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : { 
    < WELCOME : "welcome" >
  | < ARGUMENT : (["a"-"z","A"-"Z","0"-"9"])+ >
}

void Command() :
{}
{
  Welcome() | Version() | Help()
    | { throw new ParseException(Application.parseError()); }
}

void Welcome() :
{
  Token name;
}
{
  <WELCOME> name=<ARGUMENT> <EOF>
  { Application.welcome(name.toString()); }
}

void Version() :
{}
{
  "--version" <EOF>
  { Application.version(); }
}

void Help() :
{}
{
  "--help" <EOF>
  { Application.help(); }
}
